services:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kompose.image-pull-secret: ${GITLAB_IMAGE_PULL_SECRET_NAME}
        kompose.service.type: clusterip
        kubernetes.io/ingress.class: traefik
      labels:
        io.kompose.service: api
      name: api
    spec:
      ports:
        - name: '3000'
          port: 3000
          targetPort: 3000
      selector:
        io.kompose.service: api
      type: ClusterIP
    status:
      loadBalancer: {}

networkPolicies:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: web-nw
    spec:
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  com.capgemini.mcm.ingress: 'true'
      podSelector:
        matchLabels:
          io.kompose.network/web-nw: 'true'

deployments:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kompose.image-pull-secret: ${GITLAB_IMAGE_PULL_SECRET_NAME}
        kompose.service.type: clusterip
        kubernetes.io/ingress.class: traefik
      labels:
        io.kompose.service: api
      name: api
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: api
      strategy: {}
      template:
        metadata:
          annotations:
            app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
            app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
            kompose.image-pull-secret: ${GITLAB_IMAGE_PULL_SECRET_NAME}
            kompose.service.type: clusterip
            kubernetes.io/ingress.class: traefik
          labels:
            io.kompose.network/storage-nw: 'true'
            io.kompose.network/web-nw: 'true'
            io.kompose.service: api
        spec:
          containers:
            env:
              AFFILIATION_JWS_KEY: ${TESTING_AFFILIATION_JWS_KEY}
              API_FQDN: ${API_FQDN}
              API_KEY: ${TESTING_API_KEY}
              BUS_HOST: bus.bus-${LANDSCAPE}.svc.cluster.local
              BUS_MCM_HEADERS: ${BUS_MCM_HEADERS}
              BUS_MCM_MESSAGE_TYPE: ${BUS_MCM_MESSAGE_TYPE}
              BUS_CONSUMER_QUEUE: mob.subscriptions.status
              BUS_MCM_CONSUME_PASSWORD: ${TESTING_BUS_MCM_CONSUME_PASSWORD}
              BUS_MCM_CONSUME_USER: ${TESTING_BUS_MCM_CONSUME_USER}
              CLIENT_SECRET_KEY_KEYCLOAK_API: ${TESTING_IDP_API_CLIENT_SECRET}
              CLAMAV_HOST: clamav.antivirus-${LANDSCAPE}.svc.cluster.local
              CLAMAV_PORT: '3310'
              IDP_FQDN: ${IDP_FQDN}
              IDP_DB_HOST: ${TESTING_PGSQL_FLEX_ADDRESS}
              IDP_DB_PORT: 5432
              IDP_DB_AUTH_SOURCE: ${TESTING_PGSQL_NAME}
              IDP_DB_DATABASE: ${TESTING_PGSQL_NAME}
              IDP_DB_SERVICE_USER: ${TESTING_PGSQL_SERVICE_USER}
              IDP_DB_SERVICE_PASSWORD: ${TESTING_PGSQL_SERVICE_PASSWORD}
              LANDSCAPE: ${LANDSCAPE}
              MONGO_AUTH_SOURCE: ${TESTING_MONGO_DB_NAME}
              MONGO_HOST: ${TESTING_MONGO_HOST}
              MONGO_PORT: 27017
              MONGO_SERVICE_USER: ${TESTING_MONGO_SERVICE_USER}
              MONGO_SERVICE_PASSWORD: ${TESTING_MONGO_SERVICE_PASSWORD}
              MONGO_DATABASE: ${TESTING_MONGO_DB_NAME}
              S3_HOST: s3.s3-${LANDSCAPE}.svc.cluster.local
              S3_PORT: '9000'
              S3_SERVICE_PASSWORD: ${TESTING_S3_SERVICE_PASSWORD}
              S3_SERVICE_USER: ${TESTING_S3_SERVICE_USER}
              MAILHOG_EMAIL_FROM: ${MAILHOG_EMAIL_FROM}
              MAILHOG_HOST: mailhog.mailhog-${LANDSCAPE}.svc.cluster.local
              WEBSITE_FQDN: ${WEBSITE_FQDN}
              PGSQL_FLEX_SSL_CERT: ${PGSQL_FLEX_SSL_CERT}
            image: ${API_IMAGE_NAME}
            name: api
            ports:
              - containerPort: 3000
            resources: {}
          imagePullSecrets:
            - name: ${GITLAB_IMAGE_PULL_SECRET_NAME}
          restartPolicy: Always
    status: {}

middlewares:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: api-headers-middleware
    spec:
      headers:
        customRequestHeaders:
          X-Forwarded-Port: '443'
          X-Forwarded-Proto: https

  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: api-inflightreq-middleware
    spec:
      inFlightReq:
        amount: 100

  # - metadata:
  #     annotations:
  #       app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
  #       app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
  #       kubernetes.io/ingress.class: traefik
  #     name: api-ratelimit-middleware
  #   spec:
  #     rateLimit:
  #       average: 30
  #       burst: 50
  #       period: 1s
  #       sourceCriterion:
  #         ipStrategy:
  #           depth: 2

ingressRoutes:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: api
    spec:
      entryPoints:
        - web
      routes:
        - kind: Rule
          match: Host(`${API_FQDN}`)
          middlewares:
            - name: api-headers-middleware
            # - name: api-ratelimit-middleware
            - name: api-inflightreq-middleware
          services:
            - kind: Service
              name: api
              port: 3000
