configMaps:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: master-realm-config
    data:
      master-realm.json: "idp/master-realm.json"

services:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kompose.image-pull-secret: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
        kompose.service.type: clusterip
        kubernetes.io/ingress.class: traefik
      creationTimestamp: null
      labels:
        io.kompose.service: idp
      name: idp-http
    spec:
      ports:
        - name: http
          port: 8080
        - name: https
          port: 8443
        - name: http-management
          port: 9990
        - name: management
          port: 9090
        - name: jgroups-tcp
          port: 7600
        - name: jgroups-tcp-fd
          port: 57600
        - name: jgroups-udp
          port: 55200
          protocol: UDP
        - name: jgroups-udp-mc
          port: 45688
          protocol: UDP
        - name: jgroups-udp-fd
          port: 54200
          protocol: UDP
        - name: modcluster
          port: 23364
        - name: modcluster-udp
          port: 23364
          protocol: UDP
        - name: txn-recovery-ev
          port: 4712
        - name: txn-status-mgr
          port: 4713
      selector:
        io.kompose.service: idp
      type: ClusterIP
      publishNotReadyAddresses: false
    status:
      loadBalancer: {}

headlessService:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kompose.service.type: clusterip
        kubernetes.io/ingress.class: traefik
      creationTimestamp: null
      labels:
        io.kompose.service: idp
      name: idp-headless
    spec:
      type: ClusterIP
      clusterIP: None
      ports:
        - name: http
          port: 8080
      publishNotReadyAddresses: false
      selector:
        io.kompose.service: idp
      sessionAffinity: None

autoscaling:
  metadata:
    annotations:
      app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
      app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
      kompose.service.type: clusterip
      kubernetes.io/ingress.class: traefik
    enabled: true
    name: idp
  spec:
    scaleTargetRef:
      kind: StatefulSet
      name: idp
      apiVersion: apps/v1
    minReplicas: 2
    maxReplicas: 8
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 300

rbac:
  - metadata:
      labels:
        io.kompose.service: idp
      name: idp-service-account
      namespace: idp-${CLOUD_HELM_DEPLOY_NAMESPACE}
    serviceAccountName: idp-service-account
    create: true
    rules:
      - apiGroups:
          - ""
        resources:
          - pods
        verbs:
          - get
          - list

statefulSet:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kompose.image-pull-secret: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
        kompose.service.type: clusterip
        kubernetes.io/ingress.class: traefik
      labels:
        io.kompose.service: idp
      name: idp
    spec:
      replicas: 3
      selector:
        matchLabels:
          io.kompose.service: idp
      podManagementPolicy: Parallel
      updateStrategy:
        type: RollingUpdate
      serviceName: idp-headless
      template:
        metadata:
          annotations:
            app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
            app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
            kompose.image-pull-secret: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
            kompose.service.type: clusterip
            kubernetes.io/ingress.class: traefik
          labels:
            io.kompose.network/web-nw: "true"
            io.kompose.service: idp
        spec:
          containers:
            securityContext:
              runAsUser: 1000
              runAsNonRoot: true
            args:
              - -b
              - 0.0.0.0
              - -Djboss.modules.system.pkgs=org.jboss.logmanager
              - -Dkeycloak.migration.action=import
              - -Dkeycloak.migration.provider=singleFile
              - -Dkeycloak.migration.file=/tmp/master-realm.json
              - -Dkeycloak.migration.strategy=IGNORE_EXISTING
              - -Dkeycloak.profile.feature.scripts=enabled
              - -Djboss.node.name=$(MY_POD_NAME)
              - -Djgroups.bind_addr=$(HOST_IP)
            env:
              KEYCLOAK_USER: ${CLOUD_IDP_ADMIN_USER}
              KEYCLOAK_PASSWORD: ${CLOUD_IDP_ADMIN_PASSWORD}
              PROXY_ADDRESS_FORWARDING: "true"
              WEBSITE_FQDN: ${WEBSITE_FQDN}
              API_FQDN: ${API_FQDN}
              DB_SCHEMA: ${CLOUD_PGSQL_NAME}
              DB_ADDR: ${CLOUD_PGSQL_FLEX_ADDRESS}
              DB_PORT: ${CLOUD_PGSQL_DB_PORT}
              DB_VENDOR: postgres
              DB_DATABASE: ${CLOUD_PGSQL_NAME}
              DB_USER: ${CLOUD_IDP_DEV_USER}
              DB_PASSWORD: ${CLOUD_IDP_DEV_PASSWORD}
              LANDSCAPE: ${LANDSCAPE}
              BASE_DOMAIN: ${BASE_DOMAIN}
              MATOMO_FQDN: ${MATOMO_FQDN}
              JGROUPS_DISCOVERY_PROTOCOL: kubernetes.KUBE_PING
              JGROUPS_TRANSPORT_STACK: tcp
              KC_CACHE_STACK: kubernetes
              KUBERNETES_NAMESPACE: idp-${CLOUD_HELM_DEPLOY_NAMESPACE}
              CACHE_OWNERS: "2"
              CACHE_OWNERS_COUNT: "2"
              CACHE_OWNERS_AUTH_SESSIONS_COUNT: "2"
            image: ${KEYCLOAK_IMAGE_NAME}
            name: idp
            pullPolicy: IfNotPresent
            ports:
              - name: http
                protocol: TCP
                containerPort: 8080
              - name: https
                protocol: TCP
                containerPort: 8443
              - name: http-management
                containerPort: 9990
                protocol: TCP
              - name: management
                containerPort: 9090
              - name: jgroups-tcp
                containerPort: 7600
              - name: jgroups-tcp-fd
                containerPort: 57600
              - name: jgroups-udp
                containerPort: 55200
                protocol: UDP
              - name: jgroups-udp-mc
                containerPort: 45688
                protocol: UDP
              - name: jgroups-udp-fd
                containerPort: 54200
                protocol: UDP
              - name: modcluster
                containerPort: 23364
              - name: modcluster-udp
                containerPort: 23364
                protocol: UDP
              - name: txn-recovery-ev
                containerPort: 4712
              - name: txn-status-mgr
                containerPort: 4713
            livenessProbe:
              httpGet:
                path: /auth/
                port: http
              initialDelaySeconds: 0
              timeoutSeconds: 5
            readinessProbe:
              httpGet:
                path: /auth/realms/master
                port: http
              initialDelaySeconds: 30
              timeoutSeconds: 1
            startupProbe:
              httpGet:
                path: /auth/
                port: http
              initialDelaySeconds: 30
              timeoutSeconds: 1
              failureThreshold: 60
              periodSeconds: 5
            resources:
              requests:
                cpu: "500m"
                memory: "1Gi"
              limits:
                cpu: "500m"
                memory: "16Gi"
            volumeMounts:
              - name: realm-config
                mountPath: /tmp
          imagePullSecrets:
            - name: ${PROXY_HANDOVER_IMAGE_PULL_SECRET_NAME}
          serviceAccountName: default
          enableServiceLinks: true
          restartPolicy: Always
          terminationGracePeriodSeconds: 60
          securityContext:
            fsGroup: 1000
          volumes:
            - configMap:
                name: master-realm-config
              name: realm-config

ingressRoutes:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: idp
    spec:
      entryPoints:
        - web
      routes:
        - kind: Rule
          match: Host(`${IDP_FQDN}`)
          middlewares:
            - name: idp-headers-middleware
            - name: idp-inflightreq-middleware
            - name: custom-error-middleware
              namespace: traefik-int
          services:
            - name: idp-http
              port: 8080

middlewares:
  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: idp-headers-middleware
    spec:
      headers:
        customRequestHeaders:
          X-Forwarded-Port: "443"
          X-Forwarded-Proto: https

  - metadata:
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        kubernetes.io/ingress.class: traefik
      name: idp-inflightreq-middleware
    spec:
      inFlightReq:
        amount: 100
