.preview-fqdn:
  variables:
    ADMIN_FQDN: admin-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}
    API_FQDN: api-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}
    ADMIN_BUS_FQDN: admin-bus-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}
    S3_FQDN: s3.${LANDSCAPE}.${BASE_DOMAIN}
    IDP_FQDN: idp-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}
    MATOMO_FQDN: analytics-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}
    VAULT_FQDN: vault-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}
    WEBSITE_FQDN: website-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}
    SIMULATION_MAAS_FQDN: simulation-maas-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}
    MAILHOG_FQDN: mailhog-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}

.preview-env-vars:
  variables:
    LANDSCAPE: "preview"
    landscape_subdomain: "preview.${BASE_DOMAIN}"
    SECRET_NAME: ${MODULE_NAME}-tls
    CLUSTER_ISSUER: clusterissuer-mcm-dev
  extends:
    - .preview-fqdn

.preview-deploy-tags:
  tags:
    - os:linux
    - platform:dev
    - task:deploy

.preview-image-job:
  extends:
    - .preview-env-vars
    - .image-job
    - .only-branches
    - .except-clean-or-release

.auto-stop-preview:
  environment:
    auto_stop_in: 3 days

.declare-deployment-functions: &declare-deployment-functions |
  function deploy {

    echo "deploying: ${MODULE_NAME} for ${CI_ENVIRONMENT_TIER}, subdomain ${LANDSCAPE}..."

    # CREATE NAMESPACE ENV
    echo "This is your namespace: ${NAMESPACE}"
    kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -

    export GITLAB_IMAGE_PULL_SECRET_NAME=${IMAGE_PULL_SECRET_PREFIX}-${MODULE_NAME}
    export PROXY_IMAGE_PULL_SECRET_NAME=${PROXY_IMAGE_PULL_SECRET_PREFIX}-${MODULE_NAME}
    kubectl create secret docker-registry ${GITLAB_IMAGE_PULL_SECRET_NAME} --docker-server="$CI_REGISTRY" --docker-username="$CI_DEPLOY_USER" --docker-password="$CI_DEPLOY_PASSWORD" --docker-email="$GITLAB_USER_EMAIL" -o yaml --dry-run=client --namespace=${NAMESPACE} | kubectl apply -f -
    kubectl create secret docker-registry ${PROXY_IMAGE_PULL_SECRET_NAME} --docker-server="$NEXUS_DOCKER_REGISTRY_URL" --docker-username="$NEXUS_USER_NAME" --docker-password="$NEXUS_USER_PWD" --docker-email="$GITLAB_USER_EMAIL" -o yaml --dry-run=client --namespace=${NAMESPACE} | kubectl apply -f -
    chmod 777 /usr/local/bin/a
    chmod 777 /usr/local/bin/k
    mkdir -p ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE} && ENV_PATH=${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/params.env KOMPOSE_FILE=$1 k | tee ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/template.yml
    echo "Special condition for ${MODULE_NAME}"
    if [ ${MODULE_NAME} = "idp" ]
    then
      sed -i 's/"${/##/g' ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/template.yml
      sed -i 's/access.${/%%/g' ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/template.yml
      cat ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/template.yml | envsubst | tee ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/resources.yml
      sed -i 's/##/"${/g' ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/resources.yml
      sed -i 's/%%/access.${/g' ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/resources.yml
    else
      cat ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/template.yml | envsubst | tee ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/resources.yml
    fi
    cat ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/resources.yml

    kubectl apply -f ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/resources.yml --namespace=${NAMESPACE}

    cat ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/params.env | envsubst > ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/values.env
  }
  function pod_namespace {
    kubectl get pods -o wide --all-namespaces | grep -- ${BRANCH_NAME}-${LANDSCAPE} | grep $1 | awk '{ print $1 }' | head -n 1
  }
  function config_volume {
    PV_CHECK=$(kubectl get pv -o wide --all-namespaces | grep ${BRANCH_NAME} | grep $1 | awk '{ print $1 }')
    if [ $PV_CHECK != "" ]
    then
        echo "### Patch the persistent volume to retain than delete for $1 ###"
        kubectl patch pv $PV_CHECK -p '{"spec":{"persistentVolumeReclaimPolicy":"Retain"}}'
    fi
  }
  function wait_pod {
    while [[ $(pod_namespace $1) == "" ]]
    do
      echo "Wait $1 try"
      sleep 10
    done
  }
  function delete_pod {
    if [ -n "$(pod_namespace $1)" ]
    then
      echo "### $1 pod is already up so we delete it before recreating it ! ###"
      KUBE_NAMESPACE=$(pod_namespace $1)
      kubectl delete pod $1 -n $KUBE_NAMESPACE
    fi
  }

.verify-job:
  extends:
    - .commons
    - .test-job-tags
    - .only-branches
    - .except-all
  image: ${VERIFY_IMAGE_NAME}
  stage: verify
  variables:
    SONAR_SOURCES: .
    SONAR_EXCLUSIONS: "sonar.exclusions=**/node_modules/**,dist/**,databaseConfig/**,public/**,coverage/**,**/__tests__/**,**.yml,**.json,**.md,eslintrc.js"
    SONAR_CPD_EXCLUSIONS: "**/__tests__/**,src/datasources/**,src/models/**,src/repositories/**"
  needs: ["sonarqube-verify-image-build"]
  script:
    - |
      cd /opt/mcm-verify/
      ./verify.sh
  artifacts:
    paths:
      - ${MODULE_PATH:-${MODULE_NAME}}/sonarqube_quality_gate_report
      - ${MODULE_PATH:-${MODULE_NAME}}/sonarqube_issues
    expire_in: 5 days

.verify-all-script: &verify-all-script /opt/mcm-verify/convert_sonarqube_issues.sh

verify-all:
  extends:
    - .commons
    - .test-job-tags
    - .only-branches
    - .except-all
  stage: verify-all
  image: ${VERIFY_IMAGE_NAME}
  script:
    - *verify-all-script
  artifacts:
    paths:
      - gl-code-quality-report.json
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 5 days

.preview-deploy-job:
  extends:
    - .commons
    - .subdomains
    - .preview-env-vars
    - .auto-stop-preview
    - .except-clean-or-release
    - .only-branches
    - .no-dependencies
  image: ${KUBETOOLS_IMAGE_TAGNAME}
  stage: deploy-preview
  before_script:
    - |
      cd ${MODULE_PATH}
    - *declare-deployment-functions
    - |
      echo "ENV_URL=https://${MODULE_NAME}-${CI_COMMIT_REF_SLUG}.${LANDSCAPE}.${BASE_DOMAIN}" > deployment.env
  script:
    - |
      deploy
  artifacts:
    paths:
      - ${MODULE_PATH:-${MODULE_NAME}}/k8s/${LANDSCAPE}
    reports:
      dotenv: ${MODULE_PATH:-${MODULE_NAME}}/deployment.env
    expire_in: 4 week
  environment:
    name: ${CI_COMMIT_REF_SLUG}-${LANDSCAPE}/${MODULE_NAME}
    url: ${ENV_URL}

.declare-undeployment-functions: &declare-undeployment-functions |
  function undeploy {
    kubectl delete namespace ${NAMESPACE}
  }
  function delete_volume {
    PV_TO_DELETE=$(kubectl get pv -o wide --all-namespaces | grep ${BRANCH_NAME} | grep $1 | awk '{ print $1 }')
    if [ $PV_TO_DELETE != "" ]
    then
        echo "### Patch the persistent volume to delete than retain for $1 ###"
        kubectl patch pv $PV_TO_DELETE -p '{"spec":{"persistentVolumeReclaimPolicy":"Delete"}}'
    fi
  }

.commons_preview_cleanup:
  stage: cleanup
  extends:
    - .commons
    - .manual
    - .except-clean-or-release
    - .no-git-clone
    - .preview-env-vars
    - .preview-deploy-tags
  image: ${KUBETOOLS_IMAGE_TAGNAME}
  before_script:
    - cd ${MODULE_PATH}
    - *declare-undeployment-functions
  script:
    - |
      if [ ${MODULE_NAME} == "idp" ]
      then
        delete_volume postgres-keycloak-data
      fi
      if [ ${MODULE_NAME} == "api" ]
      then
        delete_volume mongo-data
      fi
      kubectl -n ${NAMESPACE} delete -f ${CI_PROJECT_DIR}/${MODULE_PATH}/k8s/${LANDSCAPE}/resources.yml
      undeploy
  environment:
    name: ${CI_COMMIT_REF_SLUG}-${LANDSCAPE}/${MODULE_NAME}
    action: stop

# UTILS
.cleanup_mongo: &cleanup_mongo |
  echo "MONGO CLEANING START"
  echo ${BRANCH_NAME}
  MONGO_POD_NAME=$(kubectl get pods -o wide -A | grep ${BRANCH_NAME} | grep mongo | awk '{ print $2 }')
  MONGO_NAMESPACE=$(kubectl get pods -o wide -A | grep ${BRANCH_NAME} | grep mongo | awk '{ print $1 }')
  kubectl exec $MONGO_POD_NAME -n $MONGO_NAMESPACE -- sh -c \
    "mongosh --username ${MONGO_SERVICE_USER} --password ${MONGO_SERVICE_PASSWORD} --authenticationDatabase ${MONGO_DB_NAME} --authenticationMechanism SCRAM-SHA-256 --eval \"db=db.getSiblingDB('${MONGO_DB_NAME}'); db.getCollectionNames().forEach(function(c) { if (c.indexOf('system.') == -1) db[c].deleteMany({}); }); quit(0);\"exit"
  echo "MONGO CLEANING STOP"

.cleanup_postgres: &cleanup_postgres |
  echo "POSTGRES IDP CLEANING START"
  echo ${BRANCH_NAME}
  IDP_POD_NAME=$(kubectl get pods -o wide -A | grep ${BRANCH_NAME} | grep idp | awk '{ print $2 }')
  IDP_NAMESPACE=$(kubectl get pods -o wide -A | grep ${BRANCH_NAME} | grep idp | awk '{ print $1 }')
  echo "INIT CONNECTION"
  kubectl exec $IDP_POD_NAME -n $IDP_NAMESPACE -c idp -- sh -c \
  "/opt/jboss/keycloak/bin/kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user ${IDP_ADMIN_USER} --password ${IDP_ADMIN_PASSWORD}"
  echo "---------"
  echo "GET USERS"
  USER_LIST_ID=$(kubectl exec $IDP_POD_NAME -n $IDP_NAMESPACE -c idp -- sh -c "/opt/jboss/keycloak/bin/kcadm.sh get users -r mcm --fields id" | jq -r '.[] | .id')
  echo $USER_LIST_ID
  if [ -z "$USER_LIST_ID" ]
  then
    echo "No user to delete"
  else
    echo "---------"
    echo "DELETE USERS"
    for i in $USER_LIST_ID
    do
      $(kubectl exec $IDP_POD_NAME -n $IDP_NAMESPACE -c idp -- sh -c "/opt/jboss/keycloak/bin/kcadm.sh delete users/$i -r mcm")
    done
  fi
  echo "---------"
  echo "GET GROUPS"
  GROUP_LIST_ID=$(kubectl exec $IDP_POD_NAME -n $IDP_NAMESPACE -c idp -- sh -c "/opt/jboss/keycloak/bin/kcadm.sh get groups -r mcm" | jq -r '.[] | select( .name == "entreprises" or .name == "collectivit√©s" or .name == "administrations_nationales") | .subGroups | .[] | .id')
  echo $GROUP_LIST_ID
  if [ -z "$GROUP_LIST_ID" ]
  then
    echo "No group to delete"
  else
    echo "---------"
    echo "DELETE GROUPS"
    for i in $GROUP_LIST_ID
    do
      $(kubectl exec $IDP_POD_NAME -n $IDP_NAMESPACE -c idp -- sh -c "/opt/jboss/keycloak/bin/kcadm.sh delete groups/$i -r mcm")
    done
  fi
  echo "POSTGRES IDP CLEANING STOP"

# UTILS
.mongo-clean-data:
  stage: utils
  extends:
    - .commons
    - .test-job-tags
    - .only-branches
    - .except-release
    - .no-dependencies
  image: ${KUBETOOLS_IMAGE_TAGNAME}
  script:
    - *cleanup_mongo

api_clean_data:
  extends:
    - .mongo-clean-data
    - .manual

.postgres-clean-data:
  stage: utils
  extends:
    - .commons
    - .test-job-tags
    - .only-branches
    - .except-release
    - .no-dependencies
  image: ${KUBETOOLS_IMAGE_TAGNAME}
  script:
    - *cleanup_postgres

idp_clean_data:
  extends:
    - .postgres-clean-data
    - .manual
